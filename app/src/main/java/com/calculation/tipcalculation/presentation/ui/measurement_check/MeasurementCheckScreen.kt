package com.calculation.tipcalculation.presentation.ui.measurement_check

import androidx.compose.foundation.Canvas
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.verticalScroll
import androidx.compose.material3.OutlinedTextField
import androidx.compose.material3.Surface
import androidx.compose.material3.Text
import androidx.compose.runtime.*
import androidx.compose.ui.Modifier
import androidx.compose.ui.geometry.Offset
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.nativeCanvas
import androidx.compose.ui.unit.dp
import com.calculation.tipcalculation.presentation.components.CustomGradientButton
import com.calculation.tipcalculation.presentation.components.CustomBackground2
import com.calculation.tipcalculation.utils.GOSTMeasurementTable
import com.calculation.tipcalculation.utils.GostKiTable

@Composable
fun MeasurementCheckScreen() {
    var diameterInput by remember { mutableStateOf("") }
    var distanceInput by remember { mutableStateOf("") }
    var resultText by remember { mutableStateOf("") }
    var lOverDe by remember { mutableStateOf<Float?>(null) }
    var lzOverDe by remember { mutableStateOf<Float?>(null) }

    Surface(modifier = Modifier.fillMaxSize()) {
        Box(modifier = Modifier.fillMaxSize()) {
            CustomBackground2()

            Column(
                modifier = Modifier
                    .fillMaxSize()
                    .padding(16.dp)
                    .verticalScroll(rememberScrollState())
            ) {
                Spacer(modifier = Modifier.height(24.dp))

                OutlinedTextField(
                    value = diameterInput,
                    onValueChange = { diameterInput = it },
                    label = { Text("–î–∏–∞–º–µ—Ç—Ä D (–º–º)") },
                    modifier = Modifier.fillMaxWidth()
                )

                Spacer(modifier = Modifier.height(12.dp))

                OutlinedTextField(
                    value = distanceInput,
                    onValueChange = { distanceInput = it },
                    label = { Text("–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ L (–º–º)") },
                    modifier = Modifier.fillMaxWidth()
                )

                Spacer(modifier = Modifier.height(24.dp))

                CustomGradientButton(
                    modifier = Modifier.fillMaxWidth(),
                    text = "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å",
                    onClick = {
                        val D = diameterInput.toDoubleOrNull()
                        val L = distanceInput.toDoubleOrNull()

                        if (D == null || L == null || D <= 0 || L <= 0) {
                            resultText = "‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è (D > 0 –∏ L > 0)."
                            lOverDe = null
                            lzOverDe = null
                            return@CustomGradientButton
                        }

                        val pi = Math.PI
                        val De = D / pi
                        val ratioLDe = L / De

                        val requiredLz = if (ratioLDe < 8) 0.35 * L - 0.4 else 0.0
                        val ratioLzDe = if (ratioLDe < 8) requiredLz / De else 0.0

                        lOverDe = ratioLDe.toFloat()
                        lzOverDe = ratioLzDe.toFloat()

                        val rule = GOSTMeasurementTable.findRule(D, ratioLDe)

                        val baseTotalPoints = rule?.totalPoints
                        val finalTotalPoints = if (ratioLDe < 4 && baseTotalPoints != null) baseTotalPoints * 2 else baseTotalPoints
                        val diameterPoints = if (ratioLDe < 4) rule?.diameterPoints?.times(2) else rule?.diameterPoints

                        val ki = finalTotalPoints?.let { GostKiTable.getByTotalPoints(it) }

                        resultText = buildString {
                            appendLine("üîé –ü–û–î–†–û–ë–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
                            appendLine()
                            appendLine("üìê –í–≤–µ–¥—ë–Ω–Ω—ã–π –¥–∏–∞–º–µ—Ç—Ä —Ç—Ä—É–±—ã (D):")
                            appendLine("‚Üí D = %.2f –º–º".format(D))
                            appendLine()
                            appendLine("üìè –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –∏–∑–º–µ—Ä–∏—Ç–µ–ª—å–Ω–æ–π —Ç–æ—á–∫–∏ (L):")
                            appendLine("‚Üí L = %.2f –º–º".format(L))
                            appendLine()
                            appendLine("üîÑ –≠–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–Ω—ã–π –¥–∏–∞–º–µ—Ç—Ä (De = D / œÄ):")
                            appendLine("‚Üí œÄ ‚âà %.5f".format(pi))
                            appendLine("‚Üí De = %.2f –º–º".format(De))
                            appendLine()
                            appendLine("üìä –û—Ç–Ω–æ—à–µ–Ω–∏–µ –¥–ª–∏–Ω—ã –¥–æ —Ç–æ—á–∫–∏ –∫ —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–Ω–æ–º—É –¥–∏–∞–º–µ—Ç—Ä—É:")
                            appendLine("‚Üí L / De = %.2f".format(ratioLDe))
                            appendLine()

                            if (ratioLDe >= 8) {
                                appendLine("‚úÖ –£—á–∞—Å—Ç–æ–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ì–û–°–¢ 17.2.4.06-90")
                                appendLine("‚Üí –ü—Ä—è–º–æ–ª–∏–Ω–µ–π–Ω—ã–π —É—á–∞—Å—Ç–æ–∫ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–π –¥–ª–∏–Ω—ã.")
                                appendLine("‚Üí –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —É—á–∞—Å—Ç–æ–∫ Lz –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")
                            } else {
                                appendLine("‚ùå –£—á–∞—Å—Ç–æ–∫ –ù–ï —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ì–û–°–¢ 17.2.4.06-90")
                                appendLine("‚Üí –¢—Ä–µ–±—É–µ—Ç—Å—è –∫–æ–º–ø–µ–Ω—Å–∏—Ä—É—é—â–∏–π —É—á–∞—Å—Ç–æ–∫ –ø–æ—Å–ª–µ —Ç–æ—á–∫–∏ –∏–∑–º–µ—Ä–µ–Ω–∏—è.")
                                appendLine()
                                appendLine("üìå –†–∞—Å—á—ë—Ç –ø–æ –ì–û–°–¢-–≥—Ä–∞—Ñ–∏–∫—É (—á–µ—Ä—Ç. 3):")
                                appendLine("‚Üí Lz = 0.35 √ó L ‚àí 0.4 = %.2f –º–º".format(requiredLz))
                                appendLine("‚Üí –û—Ç–Ω–æ—à–µ–Ω–∏–µ Lz / De = %.2f".format(ratioLzDe))
                                appendLine()
                                appendLine("üì§ –†–ï–ó–£–õ–¨–¢–ê–¢:")
                                appendLine("‚Üí üìè –¢—Ä–µ–±—É–µ–º–∞—è –¥–ª–∏–Ω–∞ —É—á–∞—Å—Ç–∫–∞ –ø–æ—Å–ª–µ –∏–∑–º–µ—Ä–µ–Ω–∏—è (Lz):")
                                appendLine("   ‚úÖ Lz = %.2f –º–º".format(requiredLz))
                                appendLine()

                                if (L > requiredLz) {
                                    appendLine("‚úÖ –ì–û–°–¢ –ø.2.2: —É—Å–ª–æ–≤–∏–µ L > Lz —Å–æ–±–ª—é–¥–µ–Ω–æ.")
                                } else {
                                    appendLine("‚ùå –ì–û–°–¢ –ø.2.2: L ‚â§ Lz ‚Äî –Ω–∞—Ä—É—à–µ–Ω–æ.")
                                    appendLine("‚Üí –ù–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–≤–æ–¥–∏—Ç—å –∏–∑–º–µ—Ä–µ–Ω–∏—è –≤ –¥–∞–Ω–Ω–æ–π —Ç–æ—á–∫–µ.")
                                }

                                appendLine()
                                if (ratioLDe < 4) {
                                    appendLine("‚ö† –ì–û–°–¢ –ø.2.3: L / De < 4")
                                    appendLine("‚Üí –¢—Ä–µ–±—É–µ—Ç—Å—è —É–≤–µ–ª–∏—á–∏—Ç—å —á–∏—Å–ª–æ —Ç–æ—á–µ–∫ –∏–∑–º–µ—Ä–µ–Ω–∏—è –≤ 2 —Ä–∞–∑–∞.")
                                } else {
                                    appendLine("‚úÖ –ì–û–°–¢ –ø.2.3: –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —É—á–∞—Å—Ç–∫–∞ —Å–æ–±–ª—é–¥–µ–Ω–∞.")
                                }

                                appendLine()
                            }

                            appendLine("üìè –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫ –∏–∑–º–µ—Ä–µ–Ω–∏—è –ø–æ –ì–û–°–¢:")
                            appendLine("‚Üí –í—Å–µ–≥–æ —Ç–æ—á–µ–∫: ${finalTotalPoints ?: "‚Äî"} (–ø–æ –¥–∏–∞–º–µ—Ç—Ä—É: ${diameterPoints ?: "‚Äî"})")

                            if (ratioLDe < 4) {
                                appendLine("‚ö† –£–≤–µ–ª–∏—á–µ–Ω–æ –≤ 2 —Ä–∞–∑–∞ –∏–∑-–∑–∞ –∫–æ—Ä–æ—Ç–∫–æ–π –¥–ª–∏–Ω—ã (L / De < 4)")
                            }

                            if (ki != null) {
                                appendLine()
                                appendLine("üìà –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã Ki:")
                                ki.kValues.forEachIndexed { index, value ->
                                    appendLine("‚Üí Ki[${index + 1}] = %.2f".format(value))
                                }
                            }
                        }
                    }
                )


                Spacer(modifier = Modifier.height(24.dp))

                LzGraphChart(
                    modifier = Modifier
                        .fillMaxWidth()
                        .padding(vertical = 16.dp),
                    lOverDePoint = lOverDe,
                    lzOverDePoint = lzOverDe
                )

                if (resultText.isNotEmpty()) {
                    Text(
                        text = resultText,
                        modifier = Modifier.padding(8.dp)
                    )
                }
            }
        }
    }
}

@Composable
fun LzGraphChart(
    modifier: Modifier = Modifier,
    lOverDePoint: Float? = null,
    lzOverDePoint: Float? = null
) {
    val dataPoints = List(12) { i ->
        val lOverDe = 2.5f + i * 0.5f
        val lzOverDe = 0.35f * lOverDe - 0.4f
        lOverDe to lzOverDe
    }

    Canvas(modifier = modifier.height(250.dp).fillMaxWidth()) {
        val padding = 40f
        val xMin = 2.5f
        val xMax = 10f
        val yMax = 3f
        val yMin = 0f

        val xScale = (size.width - padding * 2) / (xMax - xMin)
        val yScale = (size.height - padding * 2) / (yMax - yMin)

        // –°–µ—Ç–∫–∞
        for (i in 0..(xMax - xMin).toInt()) {
            val x = padding + i * xScale
            drawLine(Color.LightGray, Offset(x, padding), Offset(x, size.height - padding))
        }

        for (j in 0..yMax.toInt()) {
            val y = size.height - padding - j * yScale
            drawLine(Color.LightGray, Offset(padding, y), Offset(size.width - padding, y))
        }

        // –û—Å–∏
        drawLine(Color.Black, Offset(padding, size.height - padding), Offset(size.width - padding, size.height - padding), strokeWidth = 3f)
        drawLine(Color.Black, Offset(padding, size.height - padding), Offset(padding, padding), strokeWidth = 3f)

        // –ü–æ–¥–ø–∏—Å–∏
        drawContext.canvas.nativeCanvas.apply {
            drawText("L", size.width / 2, size.height - 5f, android.graphics.Paint().apply {
                color = android.graphics.Color.BLACK
                textSize = 32f
                textAlign = android.graphics.Paint.Align.CENTER
            })
            drawText("Lz", 5f, size.height / 2, android.graphics.Paint().apply {
                color = android.graphics.Color.BLACK
                textSize = 32f
                textAlign = android.graphics.Paint.Align.LEFT
            })
        }

        // –ú–µ—Ç–∫–∏ X
        val xLabels = listOf(2.5f, 4f, 5f, 6f, 8f)
        xLabels.forEach { label ->
            val x = padding + (label - xMin) * xScale
            drawContext.canvas.nativeCanvas.drawText(
                "%.1f".format(label),
                x,
                size.height - 10f,
                android.graphics.Paint().apply {
                    color = android.graphics.Color.BLACK
                    textSize = 24f
                    textAlign = android.graphics.Paint.Align.CENTER
                }
            )
        }

        // –ú–µ—Ç–∫–∏ Y
        val yLabels = listOf(0f, 1f, 2f, 3f)
        yLabels.forEach { label ->
            val y = size.height - padding - (label - yMin) * yScale
            drawContext.canvas.nativeCanvas.drawText(
                "%.0f".format(label),
                padding - 10f,
                y + 8f,
                android.graphics.Paint().apply {
                    color = android.graphics.Color.BLACK
                    textSize = 24f
                    textAlign = android.graphics.Paint.Align.RIGHT
                }
            )
        }

        // –õ–∏–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ Lz = 0.35 * L - 0.4
        for (i in 0 until dataPoints.size - 1) {
            val (x1, y1) = dataPoints[i]
            val (x2, y2) = dataPoints[i + 1]
            drawLine(
                color = Color.Blue,
                start = Offset(padding + (x1 - xMin) * xScale, size.height - padding - (y1 - yMin) * yScale),
                end = Offset(padding + (x2 - xMin) * xScale, size.height - padding - (y2 - yMin) * yScale),
                strokeWidth = 4f
            )
        }

        // –¢–æ—á–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (lOverDePoint != null && lzOverDePoint != null) {
            val x = padding + (lOverDePoint - xMin) * xScale
            val y = size.height - padding - (lzOverDePoint - yMin) * yScale

            drawCircle(
                color = Color.Red,
                radius = 8f,
                center = Offset(x, y)
            )
        }
    }
}